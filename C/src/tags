!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jppm/Documents/ensimag/sem_7/ensimag-video/C/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
DECLTYPE	uthash.h	/^#define DECLTYPE(/;"	d
DECLTYPE_ASSIGN	uthash.h	/^#define DECLTYPE_ASSIGN(/;"	d
ELMT_FROM_HH	uthash.h	/^#define ELMT_FROM_HH(/;"	d
ENSIVIDEO_H	ensivideo.h	/^#define ENSIVIDEO_H$/;"	d
ENSIVORBIS_H	ensivorbis.h	/^#define ENSIVORBIS_H$/;"	d
HASH_ADD	uthash.h	/^#define HASH_ADD(/;"	d
HASH_ADD_BYHASHVALUE	uthash.h	/^#define HASH_ADD_BYHASHVALUE(/;"	d
HASH_ADD_BYHASHVALUE_INORDER	uthash.h	/^#define HASH_ADD_BYHASHVALUE_INORDER(/;"	d
HASH_ADD_INORDER	uthash.h	/^#define HASH_ADD_INORDER(/;"	d
HASH_ADD_INT	uthash.h	/^#define HASH_ADD_INT(/;"	d
HASH_ADD_KEYPTR	uthash.h	/^#define HASH_ADD_KEYPTR(/;"	d
HASH_ADD_KEYPTR_BYHASHVALUE	uthash.h	/^#define HASH_ADD_KEYPTR_BYHASHVALUE(/;"	d
HASH_ADD_KEYPTR_BYHASHVALUE_INORDER	uthash.h	/^#define HASH_ADD_KEYPTR_BYHASHVALUE_INORDER(/;"	d
HASH_ADD_KEYPTR_INORDER	uthash.h	/^#define HASH_ADD_KEYPTR_INORDER(/;"	d
HASH_ADD_PTR	uthash.h	/^#define HASH_ADD_PTR(/;"	d
HASH_ADD_STR	uthash.h	/^#define HASH_ADD_STR(/;"	d
HASH_ADD_TO_BKT	uthash.h	/^#define HASH_ADD_TO_BKT(/;"	d
HASH_APPEND_LIST	uthash.h	/^#define HASH_APPEND_LIST(/;"	d
HASH_BER	uthash.h	/^#define HASH_BER(/;"	d
HASH_BKT_CAPACITY_THRESH	uthash.h	/^#define HASH_BKT_CAPACITY_THRESH /;"	d
HASH_BLOOM_ADD	uthash.h	/^#define HASH_BLOOM_ADD(/;"	d
HASH_BLOOM_BITLEN	uthash.h	/^#define HASH_BLOOM_BITLEN /;"	d
HASH_BLOOM_BITSET	uthash.h	/^#define HASH_BLOOM_BITSET(/;"	d
HASH_BLOOM_BITTEST	uthash.h	/^#define HASH_BLOOM_BITTEST(/;"	d
HASH_BLOOM_BYTELEN	uthash.h	/^#define HASH_BLOOM_BYTELEN /;"	d
HASH_BLOOM_FREE	uthash.h	/^#define HASH_BLOOM_FREE(/;"	d
HASH_BLOOM_MAKE	uthash.h	/^#define HASH_BLOOM_MAKE(/;"	d
HASH_BLOOM_SIGNATURE	uthash.h	/^#define HASH_BLOOM_SIGNATURE /;"	d
HASH_BLOOM_TEST	uthash.h	/^#define HASH_BLOOM_TEST(/;"	d
HASH_CLEAR	uthash.h	/^#define HASH_CLEAR(/;"	d
HASH_CNT	uthash.h	/^#define HASH_CNT(/;"	d
HASH_COUNT	uthash.h	/^#define HASH_COUNT(/;"	d
HASH_DEL	uthash.h	/^#define HASH_DEL(/;"	d
HASH_DELETE	uthash.h	/^#define HASH_DELETE(/;"	d
HASH_DEL_IN_BKT	uthash.h	/^#define HASH_DEL_IN_BKT(/;"	d
HASH_EMIT_KEY	uthash.h	/^#define HASH_EMIT_KEY(/;"	d
HASH_EXPAND_BUCKETS	uthash.h	/^#define HASH_EXPAND_BUCKETS(/;"	d
HASH_FCN	uthash.h	/^#define HASH_FCN /;"	d
HASH_FIND	uthash.h	/^#define HASH_FIND(/;"	d
HASH_FIND_BYHASHVALUE	uthash.h	/^#define HASH_FIND_BYHASHVALUE(/;"	d
HASH_FIND_INT	uthash.h	/^#define HASH_FIND_INT(/;"	d
HASH_FIND_IN_BKT	uthash.h	/^#define HASH_FIND_IN_BKT(/;"	d
HASH_FIND_PTR	uthash.h	/^#define HASH_FIND_PTR(/;"	d
HASH_FIND_STR	uthash.h	/^#define HASH_FIND_STR(/;"	d
HASH_FNV	uthash.h	/^#define HASH_FNV(/;"	d
HASH_FSCK	uthash.h	/^#define HASH_FSCK(/;"	d
HASH_INITIAL_NUM_BUCKETS	uthash.h	/^#define HASH_INITIAL_NUM_BUCKETS /;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	uthash.h	/^#define HASH_INITIAL_NUM_BUCKETS_LOG2 /;"	d
HASH_ITER	uthash.h	/^#define HASH_ITER(/;"	d
HASH_JEN	uthash.h	/^#define HASH_JEN(/;"	d
HASH_JEN_MIX	uthash.h	/^#define HASH_JEN_MIX(/;"	d
HASH_KEYCMP	uthash.h	/^#define HASH_KEYCMP(/;"	d
HASH_MAKE_TABLE	uthash.h	/^#define HASH_MAKE_TABLE(/;"	d
HASH_MUR	uthash.h	/^#define HASH_MUR(/;"	d
HASH_OAT	uthash.h	/^#define HASH_OAT(/;"	d
HASH_OOPS	uthash.h	/^#define HASH_OOPS(/;"	d
HASH_OVERHEAD	uthash.h	/^#define HASH_OVERHEAD(/;"	d
HASH_REPLACE	uthash.h	/^#define HASH_REPLACE(/;"	d
HASH_REPLACE_BYHASHVALUE	uthash.h	/^#define HASH_REPLACE_BYHASHVALUE(/;"	d
HASH_REPLACE_BYHASHVALUE_INORDER	uthash.h	/^#define HASH_REPLACE_BYHASHVALUE_INORDER(/;"	d
HASH_REPLACE_INORDER	uthash.h	/^#define HASH_REPLACE_INORDER(/;"	d
HASH_REPLACE_INT	uthash.h	/^#define HASH_REPLACE_INT(/;"	d
HASH_REPLACE_PTR	uthash.h	/^#define HASH_REPLACE_PTR(/;"	d
HASH_REPLACE_STR	uthash.h	/^#define HASH_REPLACE_STR(/;"	d
HASH_SAX	uthash.h	/^#define HASH_SAX(/;"	d
HASH_SELECT	uthash.h	/^#define HASH_SELECT(/;"	d
HASH_SFH	uthash.h	/^#define HASH_SFH(/;"	d
HASH_SIGNATURE	uthash.h	/^#define HASH_SIGNATURE /;"	d
HASH_SORT	uthash.h	/^#define HASH_SORT(/;"	d
HASH_SRT	uthash.h	/^#define HASH_SRT(/;"	d
HASH_TO_BKT	uthash.h	/^#define HASH_TO_BKT(/;"	d
HASH_VALUE	uthash.h	/^#define HASH_VALUE(/;"	d
HH_FROM_ELMT	uthash.h	/^#define HH_FROM_ELMT(/;"	d
MUR_FMIX	uthash.h	/^#define MUR_FMIX(/;"	d
MUR_GETBLOCK	uthash.h	/^#define MUR_GETBLOCK(/;"	d
MUR_ONE_THREE	uthash.h	/^#define MUR_ONE_THREE(/;"	d
MUR_PLUS0_ALIGNED	uthash.h	/^#define MUR_PLUS0_ALIGNED(/;"	d
MUR_PLUS1_ALIGNED	uthash.h	/^#define MUR_PLUS1_ALIGNED(/;"	d
MUR_PLUS2_ALIGNED	uthash.h	/^#define MUR_PLUS2_ALIGNED(/;"	d
MUR_PLUS3_ALIGNED	uthash.h	/^#define MUR_PLUS3_ALIGNED(/;"	d
MUR_ROTL32	uthash.h	/^#define MUR_ROTL32(/;"	d
MUR_THREE_ONE	uthash.h	/^#define MUR_THREE_ONE(/;"	d
MUR_TWO_TWO	uthash.h	/^#define MUR_TWO_TWO(/;"	d
NBTEX	ensitheora.h	/^#define NBTEX /;"	d
NO_DECLTYPE	uthash.h	/^#define NO_DECLTYPE$/;"	d
OGGSTREAM_H	oggstream.h	/^#define OGGSTREAM_H$/;"	d
STREAM_COMMON_H	stream_common.h	/^#define STREAM_COMMON_H$/;"	d
SYNCHRO_H	synchro.h	/^#define SYNCHRO_H$/;"	d
THEORA_H	ensitheora.h	/^#define THEORA_H$/;"	d
TYPE_THEORA	ensivideo.h	/^enum streamtype { TYPE_UNKNOW, TYPE_THEORA, TYPE_VORBIS };$/;"	e	enum:streamtype
TYPE_UNKNOW	ensivideo.h	/^enum streamtype { TYPE_UNKNOW, TYPE_THEORA, TYPE_VORBIS };$/;"	e	enum:streamtype
TYPE_VORBIS	ensivideo.h	/^enum streamtype { TYPE_UNKNOW, TYPE_THEORA, TYPE_VORBIS };$/;"	e	enum:streamtype
TextureDate	ensitheora.h	/^struct TextureDate {$/;"	s
UTHASH_H	uthash.h	/^#define UTHASH_H$/;"	d
UTHASH_VERSION	uthash.h	/^#define UTHASH_VERSION /;"	d
UT_hash_bucket	uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_handle	uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_table	uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
WP	uthash.h	/^#define WP(/;"	d
__VARIABLES__	variables.h	/^#define __VARIABLES__$/;"	d
addPageGetPacket	stream_common.c	/^int addPageGetPacket(ogg_page *ppage, struct streamstate *s) {$/;"	f	typeref:typename:int
attendreFenetreTexture	synchro.c	/^void attendreFenetreTexture() {}$/;"	f	typeref:typename:void
attendreTailleFenetre	synchro.c	/^void attendreTailleFenetre() {}$/;"	f	typeref:typename:void
audioid	ensivorbis.c	/^SDL_AudioDeviceID audioid = 0;$/;"	v	typeref:typename:SDL_AudioDeviceID
block	ensivideo.h	/^  vorbis_block block;$/;"	m	struct:vorbis_decode	typeref:typename:vorbis_block
bloom_bv	uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table	typeref:typename:uint8_t *
bloom_nbits	uthash.h	/^   uint8_t bloom_nbits;$/;"	m	struct:UT_hash_table	typeref:typename:uint8_t
bloom_sig	uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table	typeref:typename:uint32_t
buckets	uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table	typeref:typename:UT_hash_bucket *
comment	ensivideo.h	/^  th_comment comment;$/;"	m	struct:theora_decode	typeref:typename:th_comment
comment	ensivideo.h	/^  vorbis_comment comment;$/;"	m	struct:vorbis_decode	typeref:typename:vorbis_comment
count	uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket	typeref:typename:unsigned
ctx	ensivideo.h	/^  th_dec_ctx *ctx;$/;"	m	struct:theora_decode	typeref:typename:th_dec_ctx *
datedebut	stream_common.c	/^struct timespec datedebut;$/;"	v	typeref:struct:timespec
debutConsommerTexture	synchro.c	/^void debutConsommerTexture() {}$/;"	f	typeref:typename:void
debutDeposerTexture	synchro.c	/^void debutDeposerTexture() {}$/;"	f	typeref:typename:void
decodeAllHeaders	stream_common.c	/^int decodeAllHeaders(int respac, struct streamstate *s, enum streamtype type) {$/;"	f	typeref:typename:int
draw2SDL	ensitheora.c	/^void *draw2SDL(void *arg) {$/;"	f	typeref:typename:void *
dsp	ensivideo.h	/^  vorbis_dsp_state dsp;$/;"	m	struct:vorbis_decode	typeref:typename:vorbis_dsp_state
envoiTailleFenetre	synchro.c	/^void envoiTailleFenetre(th_ycbcr_buffer buffer) {$/;"	f	typeref:typename:void
expand_mult	uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket	typeref:typename:unsigned
finConsommerTexture	synchro.c	/^void finConsommerTexture() {}$/;"	f	typeref:typename:void
finDeposerTexture	synchro.c	/^void finDeposerTexture() {}$/;"	f	typeref:typename:void
fini	stream_common.c	/^bool fini = false;$/;"	v	typeref:typename:bool
get16bits	uthash.h	/^#define get16bits(/;"	d
getPacket	stream_common.c	/^int getPacket(struct streamstate *s) {$/;"	f	typeref:typename:int
getStreamState	stream_common.c	/^struct streamstate *getStreamState(ogg_sync_state *pstate, ogg_page *ppage,$/;"	f	typeref:struct:streamstate *
hashv	uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle	typeref:typename:unsigned
have	ensivorbis.c	/^SDL_AudioSpec have = {};$/;"	v	typeref:typename:SDL_AudioSpec
headersRead	ensivideo.h	/^  bool headersRead;$/;"	m	struct:streamstate	typeref:typename:bool
hh	ensivideo.h	/^  UT_hash_handle hh;$/;"	m	struct:streamstate	typeref:typename:UT_hash_handle
hh_head	uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_handle *
hh_next	uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle *
hh_prev	uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle *
hho	uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table	typeref:typename:ptrdiff_t
ideal_chain_maxlen	uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table	typeref:typename:unsigned
ineff_expands	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	typeref:typename:unsigned
info	ensivideo.h	/^  th_info info;$/;"	m	struct:theora_decode	typeref:typename:th_info
info	ensivideo.h	/^  vorbis_info info;$/;"	m	struct:vorbis_decode	typeref:typename:vorbis_info
key	uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle	typeref:typename:void *
keylen	uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle	typeref:typename:unsigned
log2_num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	typeref:typename:unsigned
main	ensivideo.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
msFromStart	stream_common.c	/^int msFromStart() {$/;"	f	typeref:typename:int
nbpacket	ensivideo.h	/^  int nbpacket;        \/\/ nb de packet complet extrait du stream$/;"	m	struct:streamstate	typeref:typename:int
nbpacketoutsync	ensivideo.h	/^  int nbpacketoutsync; \/\/ nb de packet complet extrait du stream$/;"	m	struct:streamstate	typeref:typename:int
next	uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle	typeref:typename:void *
noexpand	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	typeref:typename:unsigned
nonideal_items	uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table	typeref:typename:unsigned
num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	typeref:typename:unsigned
num_items	uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table	typeref:typename:unsigned
oggtheorastate	oggstream.c	/^ogg_sync_state oggtheorastate,$/;"	v	typeref:typename:ogg_sync_state
oggvorbisstate	oggstream.c	/^    oggvorbisstate; \/* sync and verify incoming physical bitstream *\/$/;"	v	typeref:typename:ogg_sync_state
packet	ensivideo.h	/^  ogg_packet packet;   \/\/ packet extrait du stream$/;"	m	struct:streamstate	typeref:typename:ogg_packet
pageReader	stream_common.c	/^void pageReader(FILE *vf, ogg_sync_state *pstate, ogg_page *ppage) {$/;"	f	typeref:typename:void
plane	ensitheora.h	/^  unsigned char *plane[3]; \/\/ copy of plane are contiguous, thus$/;"	m	struct:TextureDate	typeref:typename:unsigned char * [3]
prev	uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle	typeref:typename:void *
rect	ensitheora.c	/^SDL_Rect rect = {};$/;"	v	typeref:typename:SDL_Rect
renderer	ensitheora.c	/^static SDL_Renderer *renderer = NULL;$/;"	v	typeref:typename:SDL_Renderer *	file:
screen	ensitheora.c	/^static SDL_Window *screen = NULL;$/;"	v	typeref:typename:SDL_Window *	file:
serial	ensivideo.h	/^  int serial;                \/\/ numéro du stream, utile pour le hash$/;"	m	struct:streamstate	typeref:typename:int
setup	ensivideo.h	/^  th_setup_info *setup;$/;"	m	struct:theora_decode	typeref:typename:th_setup_info *
showThread	variables.c	/^pthread_t showThread;$/;"	v	typeref:typename:pthread_t
signalerFenetreEtTexturePrete	synchro.c	/^void signalerFenetreEtTexturePrete() {}$/;"	f	typeref:typename:void
signature	uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table	typeref:typename:uint32_t
streamstate	ensivideo.h	/^struct streamstate {$/;"	s
streamtype	ensivideo.h	/^enum streamtype { TYPE_UNKNOW, TYPE_THEORA, TYPE_VORBIS };$/;"	g
strstate	ensivideo.h	/^  ogg_stream_state strstate; \/\/ automate de décodage du stream$/;"	m	struct:streamstate	typeref:typename:ogg_stream_state
strtype	ensivideo.h	/^  enum streamtype strtype;$/;"	m	struct:streamstate	typeref:enum:streamtype
tail	uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_handle *
tbl	uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_table *
tex_iaff	ensitheora.c	/^int tex_iaff = 0;$/;"	v	typeref:typename:int
tex_iwri	ensitheora.c	/^int tex_iwri = 0;$/;"	v	typeref:typename:int
texturedate	ensitheora.c	/^struct TextureDate texturedate[NBTEX] = {};$/;"	v	typeref:struct:TextureDate[]
th_dec	ensivideo.h	/^  struct theora_decode th_dec;$/;"	m	struct:streamstate	typeref:struct:theora_decode
theora2SDL	ensitheora.c	/^void theora2SDL(struct streamstate *s) {$/;"	f	typeref:typename:void
theoraStreamReader	oggstream.c	/^void *theoraStreamReader(void *arg) {$/;"	f	typeref:typename:void *
theora_decode	ensivideo.h	/^struct theora_decode {$/;"	s
theorapage	oggstream.c	/^ogg_page theorapage,$/;"	v	typeref:typename:ogg_page
theorastrstate	ensitheora.c	/^struct streamstate *theorastrstate = NULL;$/;"	v	typeref:struct:streamstate *
timems	ensitheora.h	/^  double timems;           \/\/ expiration date of the frame, in ms$/;"	m	struct:TextureDate	typeref:typename:double
uint32_t	uthash.h	/^typedef unsigned int uint32_t;$/;"	t	typeref:typename:unsigned int
uint8_t	uthash.h	/^typedef unsigned char uint8_t;$/;"	t	typeref:typename:unsigned char
uthash_expand_fyi	uthash.h	/^#define uthash_expand_fyi(/;"	d
uthash_fatal	uthash.h	/^#define uthash_fatal(/;"	d
uthash_free	uthash.h	/^#define uthash_free(/;"	d
uthash_malloc	uthash.h	/^#define uthash_malloc(/;"	d
uthash_noexpand_fyi	uthash.h	/^#define uthash_noexpand_fyi(/;"	d
vo_dec	ensivideo.h	/^  struct vorbis_decode vo_dec;$/;"	m	struct:streamstate	typeref:struct:vorbis_decode
vorbis2SDL	ensivorbis.c	/^void vorbis2SDL(struct streamstate *s) {$/;"	f	typeref:typename:void
vorbisStreamReader	oggstream.c	/^void *vorbisStreamReader(void *arg) {$/;"	f	typeref:typename:void *
vorbis_decode	ensivideo.h	/^struct vorbis_decode {$/;"	s
vorbispage	oggstream.c	/^    vorbispage; \/* one Ogg bitstream page. Vorbis packets are inside *\/$/;"	v	typeref:typename:ogg_page
vorbisstrstate	ensivorbis.c	/^struct streamstate *vorbisstrstate = NULL;$/;"	v	typeref:struct:streamstate *
want	ensivorbis.c	/^SDL_AudioSpec want = {};$/;"	v	typeref:typename:SDL_AudioSpec
windowsx	ensitheora.c	/^int windowsx = 0;$/;"	v	typeref:typename:int
windowsy	ensitheora.c	/^int windowsy = 0;$/;"	v	typeref:typename:int
